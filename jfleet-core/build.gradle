plugins {
    id 'java'
    id 'java-library'
    id 'jacoco'
    id 'checkstyle'
    id 'maven-publish'
    id 'signing'    
}

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

dependencies {
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.36'
    compileOnly group: 'javax.persistence', name: 'persistence-api', version: '1.0.2'
    if (project.hasProperty("mysql8")) {
        compileOnly project(':jfleet-mock-mysql5')
        compileOnly group: 'mysql', name: 'mysql-connector-java', version: '8.0.22'
    } else {
        compileOnly group: 'mysql', name: 'mysql-connector-java', version: '5.1.49'
        compileOnly project(':jfleet-mock-mysql8')
    }
    compileOnly group: 'org.postgresql', name: 'postgresql', version: '42.2.7'

    testImplementation group: 'javax.persistence', name: 'persistence-api', version: '1.0.2'
    if (project.hasProperty("mysql8")) {
        testImplementation project(':jfleet-mock-mysql5')
        testImplementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.22'
    } else {
        testImplementation group: 'mysql', name: 'mysql-connector-java', version: '5.1.49'
        testImplementation project(':jfleet-mock-mysql8')
    }
    testRuntimeOnly group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.36'
    testImplementation group: 'org.postgresql', name: 'postgresql', version: '42.2.18'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.9.1'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.9.1'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.9.1'
}

test {
    useJUnitPlatform()
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

check.dependsOn jacocoTestReport

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)

            from components.java
            artifact sourceJar
            artifact javadocJar
            artifactId 'jfleet'
            version version
        }
    }
    if (project.hasProperty('sonatypeUsername')){
	    repositories {
	        maven {
	            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
	            credentials {
	                username sonatypeUsername
	                password sonatypePassword
	            }
	        }
	    }    
    } else {
		println 'No sonatype configuration found. Expected user and password at $HOME/.gradle/gradle.properties file.'    	
    }    
}

signing {
    sign publishing.publications.mavenJava
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            name 'JFleet'
            description 'JFleet loads data mapped as JPA into DB with alternate and fast way from JPA'
            url 'https://github.com/jerolba/jfleet'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/license/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            developers {
                developer {
                    id 'jerolba'
                    name 'Jerónimo López'
                    email 'jerolba+jfleet@gmail.com'
                }
            }
            scm {
                connection 'scm:git:git://github.com/jerolba/jfleet.git'
                developerConnection 'scm:git:ssh://github.com:jerolba/jfleet.git'
                url 'https://github.com/jerolba/jfleet'
            }
        }
    }
}